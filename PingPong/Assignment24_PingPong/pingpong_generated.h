// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PINGPONG_H_
#define FLATBUFFERS_GENERATED_PINGPONG_H_

#include "flatbuffers/flatbuffers.h"

struct GameState;
struct GameStateBuilder;

struct GameState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BLUESCORE = 4,
    VT_REDSCORE = 6
  };
  int32_t bluescore() const {
    return GetField<int32_t>(VT_BLUESCORE, 0);
  }
  int32_t redscore() const {
    return GetField<int32_t>(VT_REDSCORE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_BLUESCORE) &&
           VerifyField<int32_t>(verifier, VT_REDSCORE) &&
           verifier.EndTable();
  }
};

struct GameStateBuilder {
  typedef GameState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bluescore(int32_t bluescore) {
    fbb_.AddElement<int32_t>(GameState::VT_BLUESCORE, bluescore, 0);
  }
  void add_redscore(int32_t redscore) {
    fbb_.AddElement<int32_t>(GameState::VT_REDSCORE, redscore, 0);
  }
  explicit GameStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GameState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameState>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameState> CreateGameState(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t bluescore = 0,
    int32_t redscore = 0) {
  GameStateBuilder builder_(_fbb);
  builder_.add_redscore(redscore);
  builder_.add_bluescore(bluescore);
  return builder_.Finish();
}

inline const GameState *GetGameState(const void *buf) {
  return flatbuffers::GetRoot<GameState>(buf);
}

inline const GameState *GetSizePrefixedGameState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GameState>(buf);
}

inline bool VerifyGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GameState>(nullptr);
}

inline bool VerifySizePrefixedGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GameState>(nullptr);
}

inline void FinishGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GameState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GameState> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PINGPONG_H_
